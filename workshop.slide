Concurrency With Go
28 Nov 2017

Jacky Chiu
Data Eng Intern, Shopify

Kirin Rastogi
Security Eng Intern, Shopify

* Intro To Go

* Areas of Use

- Cloud
- Infrastructure
- Backend API
- CLI tools

* Concurrency vs Parallelism

* Concurrency vs Parallelism

Concurrency:

- The composition of independently executing tasks
- It's about structuring the problem

Parallelism:

- The execution of tasks at the same time
- It's about executing the problem

Concurrency is not parallelism, but it does enables parallelism.

* Example Problem

This little gopher need to burn these Node.js books.

- Run to book pile
- Pick up books
- Run to fire
- Burn

.image images/gophersimple1.jpg

* Trying parallelism without concurrent design

- Two gophers doing the same set of tasks

.image images/gophersimple2.jpg

Sadly they are bottlenecked at the book pile and fire.

* Concurrent Design 

- Break down the problem
- Add staging area of books
- Now the two gophers can get shit done at scale!

.image images/gophercomplex3.jpg

Notice how this concurrent design allowed for better parallelism.

* Concurrency in Go 

* Concurrency in Go 

Concurrency is a first class concept in Go.

Core components:

- Goroutines
- Channels
- Select statements

* Goroutines

- Independent executing function
- Not a thread, but can you can think of it as a cheap thread
- Multiplexed into OS threads
- Common to have thousands to hundred thousands of running

Use:

    go doSomethingCool()

* Channels 
