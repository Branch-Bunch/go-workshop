Concurrency With Go
28 Nov 2017

Jacky Chiu
Data Eng Intern, Shopify

Kirin Rastogi
Security Eng Intern, Shopify

* Intro To Go

* Areas of Use

- Cloud
- Infrastructure
- Backend API
- CLI tools

* Concurrency vs Parallelism

* Concurrency vs Parallelism

Concurrency:

- The composition of independently executing tasks
- It's about structuring the problem

Parallelism:

- The execution of tasks at the same time
- It's about executing the problem

Concurrency is not parallelism, but it does enables parallelism.

* Example Problem

This little gopher need to burn these Node.js books.

- Run to book pile
- Pick up books
- Run to fire
- Burn

.image images/gophersimple1.jpg

* Trying parallelism without concurrent design

- Two gophers doing the same set of tasks

.image images/gophersimple2.jpg

Sadly they are bottlenecked at the book pile and fire.

* Concurrent Design 

- Break down the problem
- Add staging area of books
- Now the two gophers can get shit done at scale!

.image images/gophercomplex3.jpg

Notice how this concurrent design allowed for better parallelism.

* Concurrency in Go 

* Concurrency in Go 

Concurrency is a first class concept in Go.

Core components:

- Goroutines
- Channels

Lets explore these ideas.

* Goroutines

- Independent executing function
- Can run in parallel (if the cpu cores are available)
- Not a thread, but can you can think of it as a cheap thread
- Multiplexed into OS threads
- Common to have thousands to hundred thousands of running

Use:

    go doSomethingCool()

Notice the notion of a independent task: concurrent design.

* Communication

Concurrency is hard because of sharing information.
Often you would need to access a shared variables which leads to race conditions.

Go follows this phrase:
  
    Do not communicate by sharing memory; instead, share memory by communicating. 

Whats does this mean?

- Don't use shared variables between goroutines
- Use built in channels to share data

* Channels 

Channels are values in go that allow goroutines to synchronize and exchange data.

Use channels to:

- Send data
- Receive data

    // init var in main goroutine 1
    resultChan := make(chan int)

    // send in goroutine 2
    resultChan <- 5

    // receive in goroutine 1
    result := <- resultChan

Channels can be closed.

* Channels

Channels come in two forms. `Unbuffered` and `Buffered`.

Unbuffered channels:

- Sender will block until message is received
- Used to synchronize and share data 

Buffered channels:

- Sender won't block, message will be queued
- Has a set max size

* Analogy

You can think of a unbuffered channel like a phone call.

- You can only take one call at a time
- Other calls have to wait if your in a current call

A buffered channel is like adding a voice mail.

- Someone that calls you doesn't have to wait for you to finish your call
- You can listen to one voice mail after another at your own speed
